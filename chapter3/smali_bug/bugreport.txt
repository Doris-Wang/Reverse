notes: issue is solved. Author's discription is below.

And yes, the .parameter directives that 1.4.0 output in that case conveyed no meaning. In 2.* I tightened up the logic for when a .param directive is generated, so that they don't get generated in cases like these, where they contain no information.

In general, the .param directive is used to specify a parameter name and/or any annotations associated with the parameter. If there is no name or annotations for a parameter in the dex file, then baksmali 2.* won't output a .param directive.

And yes, the .parameter directives that 1.4.0 output in that case conveyed no meaning. In 2.* I tightened up the logic for when a .param directive is generated, so that they don't get generated in cases like these, where they contain no information.

In general, the .param directive is used to specify a parameter name and/or any annotations associated with the parameter. If there is no name or annotations for a parameter in the dex file, then baksmali 2.* won't output a .param directive.


/** issue info is below **/

1. run command 

 (1. javac Hello.java
 (2. dx --dex --output=Hello.dex Hello.class
 (3. java -jar ~/Downloads/baksmali-1.4.jar -o baksmali-1.4 Hello.dex 
 (4. java -jar ~/Downloads/baksmali-2.0.3.jar -o baksmali-2.0.3 Hello.dex

2. result is that 'param' can not be found in ./baksmali-2.0.3/ that was generated by baksmali-2.0.3.

$ grep param . -r
./baksmali-1.4/Hello.smali:    .parameter
./baksmali-1.4/Hello.smali:    .parameter
./baksmali-1.4/Hello.smali:    .parameter


3. tools version
 (1. ~$ java -version
java version "1.6.0_45"
Java(TM) SE Runtime Environment (build 1.6.0_45-b06)
Java HotSpot(TM) 64-Bit Server VM (build 20.45-b01, mixed mode)
 (2. ~$ dx --version
dx version 1.8

